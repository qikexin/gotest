package main

import (
	"github.com/gin-gonic/gin"
	"strings"
	"fmt"
	"os"
	"os/exec"
)


type Text struct {
	Content string `json:"content"`
}
type AtUser struct {
	DingtalkID string `json:"dingtalkId"`
	StaffID    string `json:"staffId"`
}
type AutoGenerated struct {
	Msgtype string `json:"msgtype"`
	Text_content Text `json:"text"`
	MsgID             string `json:"msgId"`
	CreateAt          int64  `json:"createAt"`
	ConversationType  string `json:"conversationType"`
	ConversationID    string `json:"conversationId"`
	ConversationTitle string `json:"conversationTitle"`
	SenderID          string `json:"senderId"`
	SenderNick        string `json:"senderNick"`
	SenderCorpID      string `json:"senderCorpId"`
	SenderStaffID     string `json:"senderStaffId"`
	ChatbotUserID     string `json:"chatbotUserId"`
	AtUsers []AtUser `json:"atUsers"`
}
func PathExists(path string) (bool, string) {
	dir := "/vol" + path
	fmt.Println(dir)
	_, err := os.Stat("/vol"+ path)
	if err == nil {
		//err := os.Chmod("/vol"+path,777)
		cmd := exec.Command("chmod","-R","777",dir)
		err := cmd.Start()
		if err == nil{
			fmt.Println("权限添加成功")
			return true, "权限添加成功"
		}
		fmt.Println("路径不存在")
		return false, "路径不存在"
	}
	if os.IsNotExist(err) {
		fmt.Println("未知错误")
		return false, "未知错误"
	}
	fmt.Println("目录不存在")
	return false, "目录不存在"
}

func FindPath(aa []string)(bool,string)  {
	if strings.TrimSpace(aa[0]) == "添加权限" {
		if strings.HasPrefix(strings.TrimSpace(aa[1]),"/youku") {
			if len(strings.Split(strings.TrimSpace(aa[1]),"/")) > 2{
				bb,_ := PathExists(strings.TrimSpace(aa[1]))
				return bb,strings.TrimSpace(aa[1])
			}
			return false,strings.TrimSpace(aa[1])
		}
		return false,strings.TrimSpace(aa[1])
	}
	return false,strings.TrimSpace(aa[1])
}
func AddPerm(content string) (bool,string){
	if strings.Contains(content,"添加权限"){
		if strings.Contains(content,"："){
			s := strings.Split(content,"：")
			ab,ad := FindPath(s)
			return ab,ad
		}else if strings.Contains(content,":"){
			s := strings.Split(content,":")
			ab,ad := FindPath(s)
			return ab,ad
		}
		return false,content
	}
	return false,content
}
func events(c *gin.Context)  {
	var body AutoGenerated
	if err := c.ShouldBindJSON(&body);err != nil{
		c.JSON(400,gin.H{
			"msgtype": "text",
			"text": gin.H{
				"content":fmt.Sprintf("@%s json解析错误",body.SenderNick),
			} ,
			"at": gin.H{
				"isAtAll": false,
			},
		})
	}else {
		dir := body.Text_content.Content

		err,path := AddPerm(dir)
		if err == true && len(path) > 0 {
			c.JSON(200,gin.H{
				"msgtype": "text",
				"text": gin.H{
					"content": fmt.Sprintf("@%s 添加权限成功: %s",body.SenderNick,path),
				},
				"at": gin.H{
					"isAtAll": false,
				},
			})
		}else {
			c.JSON(400,gin.H{
				"msgtype": "text",
				"text": gin.H{
					"content": fmt.Sprintf("@%s 路径错误,%s",body.SenderNick,path),
				},
				"at": gin.H{
					"isAtAll": false,
				},
			})
		}
	}
}
func main()  {
	r := gin.Default()
	r.POST("/dingding", events)
	r.Run(":3334")
}
